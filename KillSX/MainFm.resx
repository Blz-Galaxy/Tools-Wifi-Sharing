<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AH//AAH//8AH///wP////////////w==
</value>
  </data>
</root>